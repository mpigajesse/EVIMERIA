#!/usr/bin/env python3
"""
Script de v√©rification pour le d√©ploiement Railway d'EVIMERIA
Ce script v√©rifie que tous les fichiers et configurations n√©cessaires sont pr√©sents.
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """V√©rifie qu'un fichier existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description} MANQUANT: {file_path}")
        return False

def check_file_content(file_path, required_content, description):
    """V√©rifie qu'un fichier contient du contenu sp√©cifique"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if required_content in content:
                print(f"‚úÖ {description}: Configuration trouv√©e")
                return True
            else:
                print(f"‚ùå {description}: Configuration manquante")
                return False
    except FileNotFoundError:
        print(f"‚ùå {description}: Fichier non trouv√© {file_path}")
        return False

def main():
    print("üöÄ V√©rification de pr√©paration au d√©ploiement Railway EVIMERIA\n")
    
    all_good = True
    
    # V√©rification des fichiers de configuration Railway
    print("üìÅ Fichiers de configuration Railway:")
    all_good &= check_file_exists("railway.toml", "Configuration Railway")
    all_good &= check_file_exists("nixpacks.toml", "Configuration Nixpacks")
    all_good &= check_file_exists("backend/Procfile", "Procfile")
    
    # V√©rification des d√©pendances
    print("\nüì¶ Fichiers de d√©pendances:")
    all_good &= check_file_exists("backend/requirements.txt", "Requirements Python")
    all_good &= check_file_exists("frontend/package.json", "Package.json frontend")
    
    # V√©rification du contenu des requirements
    print("\nüîç V√©rification des d√©pendances critiques:")
    all_good &= check_file_content("backend/requirements.txt", "dj-database-url", "dj-database-url dans requirements.txt")
    all_good &= check_file_content("backend/requirements.txt", "psycopg2-binary", "psycopg2-binary dans requirements.txt")
    all_good &= check_file_content("backend/requirements.txt", "gunicorn", "gunicorn dans requirements.txt")
    all_good &= check_file_content("backend/requirements.txt", "whitenoise", "whitenoise dans requirements.txt")
    
    # V√©rification de la configuration Django
    print("\n‚öôÔ∏è Configuration Django:")
    all_good &= check_file_content("backend/jaelleshop/settings.py", "dj_database_url", "Import dj_database_url")
    all_good &= check_file_content("backend/jaelleshop/settings.py", "DATABASE_URL", "Configuration DATABASE_URL")
    all_good &= check_file_content("backend/jaelleshop/settings.py", "os.environ.get('DEBUG'", "Configuration DEBUG dynamique")
    
    # V√©rification de la configuration Railway
    print("\nüöÑ Configuration Railway:")
    all_good &= check_file_content("railway.toml", "gunicorn", "Commande Gunicorn dans railway.toml")
    all_good &= check_file_content("railway.toml", "migrate", "Migrations dans railway.toml")
    all_good &= check_file_content("railway.toml", "collectstatic", "Collectstatic dans railway.toml")
    
    # V√©rification frontend
    print("\nüé® Configuration Frontend:")
    all_good &= check_file_exists("frontend/vite.config.ts", "Configuration Vite")
    all_good &= check_file_content("frontend/package.json", "build", "Script build dans package.json")
    
    # R√©sum√©
    print("\n" + "="*50)
    if all_good:
        print("üéâ F√âLICITATIONS ! Votre projet est pr√™t pour le d√©ploiement Railway!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Assurez-vous que votre code est pouss√© sur GitHub")
        print("2. Cr√©ez un nouveau projet sur Railway")
        print("3. Configurez les variables d'environnement:")
        print("   - SECRET_KEY")
        print("   - DEBUG=False")
        print("   - CLOUDINARY_CLOUD_NAME")
        print("   - CLOUDINARY_API_KEY")
        print("   - CLOUDINARY_API_SECRET")
        print("4. Lancez le d√©ploiement!")
        return 0
    else:
        print("‚ùå ATTENTION ! Des probl√®mes ont √©t√© d√©tect√©s.")
        print("Veuillez corriger les erreurs ci-dessus avant de d√©ployer.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 