#!/usr/bin/env python3
"""
Test Django en local pour v√©rifier la configuration avant d√©ploiement
"""

import os
import sys
import django

# Ajouter le r√©pertoire backend au path Python
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# Configurer Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jaelleshop.settings')

def test_django_configuration():
    """Test la configuration Django de base"""
    print("üß™ Test de Configuration Django EVIMERIA")
    print("=" * 50)
    
    try:
        # Test import Django
        import django
        print(f"‚úÖ Django version: {django.get_version()}")
        
        # Setup Django
        django.setup()
        print("‚úÖ Django setup r√©ussi")
        
        # Test import des settings
        from django.conf import settings
        print(f"‚úÖ DEBUG (d√©faut): {getattr(settings, 'DEBUG', 'Non d√©fini')}")
        print(f"‚úÖ SECRET_KEY configur√©e: {'Oui' if hasattr(settings, 'SECRET_KEY') else 'Non'}")
        
        # Test import des mod√®les
        from products.models import Product, Category
        print("‚úÖ Import des mod√®les products r√©ussi")
        
        from users.models import User
        print("‚úÖ Import des mod√®les users r√©ussi")
        
        from orders.models import Order
        print("‚úÖ Import des mod√®les orders r√©ussi")
        
        # Test configuration Cloudinary
        try:
            import cloudinary
            import cloudinary.uploader
            print("‚úÖ Cloudinary import√© avec succ√®s")
            
            # Test configuration de base (sans vraies cl√©s)
            cloud_name = getattr(settings, 'CLOUDINARY_STORAGE', {}).get('CLOUD_NAME', 'Non configur√©')
            print(f"‚úÖ Cloudinary Cloud Name: {cloud_name}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur Cloudinary: {e}")
        
        # Test configuration de base de donn√©es (structure seulement)
        try:
            db_config = settings.DATABASES['default']
            engine = db_config.get('ENGINE', 'Non configur√©')
            print(f"‚úÖ Database Engine: {engine}")
            
            # V√©rifier la logique de configuration de la DB
            if 'DATABASE_URL' in os.environ:
                print("‚úÖ Configuration DATABASE_URL d√©tect√©e")
            else:
                print("‚ö†Ô∏è DATABASE_URL non d√©finie (normal en local)")
                
        except Exception as e:
            print(f"‚ùå Erreur configuration DB: {e}")
        
        # Test CORS configuration
        try:
            cors_origins = getattr(settings, 'CORS_ALLOWED_ORIGINS', [])
            print(f"‚úÖ CORS Origins configur√©es: {len(cors_origins)} entr√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur CORS: {e}")
            
        # Test REST Framework
        try:
            rest_config = getattr(settings, 'REST_FRAMEWORK', {})
            print(f"‚úÖ REST Framework configur√©: {'Oui' if rest_config else 'Non'}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur REST Framework: {e}")
        
        print("\nüéâ Tous les tests de configuration sont pass√©s !")
        print("‚úÖ L'application devrait fonctionner sur Railway")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_wsgi_application():
    """Test que l'application WSGI peut √™tre import√©e"""
    print("\nüöÄ Test WSGI Application")
    print("-" * 30)
    
    try:
        from jaelleshop.wsgi import application
        print("‚úÖ Application WSGI import√©e avec succ√®s")
        print("‚úÖ Gunicorn pourra d√©marrer l'application")
        return True
    except Exception as e:
        print(f"‚ùå Erreur WSGI: {e}")
        return False

def main():
    """Fonction principale"""
    success = True
    
    success &= test_django_configuration()
    success &= test_wsgi_application()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ SUCC√àS ! Configuration pr√™te pour Railway")
        print("\nüìã Prochaines √©tapes :")
        print("1. git add .")
        print("2. git commit -m 'Fix: Add Railway debug scripts'")
        print("3. git push origin main")
        print("4. Configurer les variables d'environnement sur Railway")
        print("5. D√©ployer !")
    else:
        print("‚ùå √âCHEC ! Des probl√®mes doivent √™tre corrig√©s")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main()) 